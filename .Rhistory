rm(list = ls())
household <- read.csv("/Users/justintenveen/Desktop/DS4 Assignment 1/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char = "", quote='\"')
##Getting Household Power Consumption
household <- read.csv("/Users/justintenveen/Desktop/DS4 Assignment 1/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char = "", quote='\"')
household$Date <- as.Date(household$Date, format="%d/%m/%Y")
##Subset Household Power Consumption
sub_household <- subset(household, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(household)
##Convert the dates
datetime <- paste(as.Date(sub_household$Date), sub_household$Time)
sub_household$Datetime <- as.POSIXct(datetime)
##Create Plot1
hist(sub_household$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
##Save to PNG
dev.copy(png, file="plot1.png", height = 480, width = 480)
dev.off()
##Getting Household Power Consumption
household <- read.csv("/Users/justintenveen/Desktop/DS4 Assignment 1/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char = "", quote='\"')
household$Date <- as.Date(household$Date, format="%d/%m/%Y")
##Subset Household Power Consumption
sub_household <- subset(household, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(household)
##Convert the dates
datetime <- paste(as.Date(sub_household$Date), sub_household$Time)
sub_household$Datetime <- as.POSIXct(datetime)
##Create Plot4
par(mfrow=c(2,2))
##1
plot(sub_household$Datetime, sub_household$Global_active_power, type="l", xlab="", ylab="Global Active Power")
##2
plot(sub_household$Datetime,sub_household$Voltage, type="l", xlab="datetime", ylab="Voltage")
##3
plot(sub_household$Datetime,sub_household$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(sub_household$Datetime,sub_household$Sub_metering_2,col="red")
lines(sub_household$Datetime,sub_household$Sub_metering_3,col="blue")
legend("topright", col=c("black","red","blue"), c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  "),lty=c(1,1), bty="n", cex=.5)
##4
plot(sub_household$Datetime, sub_household$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
##Save to PNG
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
rm(list = ls())
swirl()
swirl
library(swirl)
swirl(0)
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main = "Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout = c(5,1)
)
xyplot(Ozone~Wind | (Month), data=airquality, layout = c(5,1)
)
xyplot(Ozone~Wind | Month, data=airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyploy(y~x|f, layout = c(2,1))
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathofile("myLabels.R"), local = TRUE)
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
colors()
sample(colors(),10)
pal <- c("red", "blue")
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
p2(2)
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(colors, blue, green)
p3 <- colorRampPalette(c("blue", "green"))
p3 <- colorRampPalette(c("blue", "green"),alpha=.5)
p3(5)
rgb(0, .5, .5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3, "BuGn")
showMe()
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data = mpgm, geom = boxplot)
qplot(drv, hwy, data = mpgm, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data=mpg, fill = drv)
qplot(displ, hwy, data=mpg, facets = . ~ drv)
qplot(hwy, data=mpg, facets = drv ~ . ., binwidth = 2)
qplot(hwy, data=mpg, facets = drv ~ . . , binwidth = 2)
qplot(hwy, data=mpg, facets = drv ~ . . , binwidth = 2)
qplot(hwy, data=mpg, facets = drv ~ . . , binwidth = 2)
qplot(hwy, data=mpg, facets = drv ~ ., binwidth = 2)
qplot(data - displ, hwy, data=mpg, geom=c("point","smooth"m facets = .~drv))
qplot(data - displ, hwy, data=mpg, geom=c("point","smooth", facets = .~drv))
qplot(data - displ, hwy, data=mpg, geom=c("point","smooth"), facets = .~drv)
qplot(displ, hwy, data=mpg, geom=c("point","smooth"), facets = .~drv)
aes <- ggplot(mpg, c("displ", "hwy")
)
aes <- ggplot(mpg, displ ~ hwy)
g <- ggplot(mpg, aes(displ,hwy)
)
g
summary(g)
g+geam_point()
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(. ~ drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha=.5)
g+geom_point(size = 4, alpha=.5, aes(color=drv))
g+geom_point(aes(color=drv))+ggtitle("Swirl Rules!"), labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+ggtitle("Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv, size=2, alpha=.5)+geam_smooth(size=4, linetype=3, method="lm", se=FALSE)
)
g+geom_point(aes(color=drv, size=2, alpha=.5)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE))
g+geom_point(aes(color=drv, size=2, alpha=.5)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE))
g+geom_point(aes(color=drv, size=2, alpha=.5)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE))
g+geom_point(aes(color=drv, size=2, alpha=.5)+geom_smooth(size=4, linetype(3), method="lm", se=FALSE))
g+geom_point(aes(color=drv, size=2, alpha=.5)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE))
g+geom_point(aes(color=drv, size=2, alpha=.5)+geom_smooth(size=4, linetype="3", method="lm", se=FALSE))
g+geom_point(aes(color=drv, size=2, alpha=.5)+geom_smooth(size=4, linetype="3", method="lm", se=FALSE))chrome
g+geom_point(aes(color=drv), size=2, alpha=.5)+geom_smooth(size=4, linetype="3", method="lm", se=FALSE))
g+geom_point(aes(color=drv), size=2, alpha=.5)+geom_smooth(size=4, linetype="3", method="lm", se=FALSE)
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4, linetype="3", method="lm", se=FALSE)
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+qlim(-3,3)
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3)
)
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year))
)
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth(18497/30))
qplot(price, data=diamonds, binwidth =18497/30)
brk
counts
qplot(price, data=diamonds, binwidth =18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method="lm"))
qplot(carat, price, data = diamonds, color = cut)+geom_smooth(method="lm"))
qplot(carat, price, data = diamonds, color = cut)+geom_smooth(method="lm")
qplot(carat, price, data = diamonds, color = cut, facets=.~cut)+geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
quantile(diamonds$carat, seq(0,1,length=4), na.rm=TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price)
)
g+geom_points(alpha=1/3, facet_grid(cut ~ car2))
g+geom_point(alpha=1/3, facet_grid(cut ~ car2))
g+geom_point(aes(alpha=1/3), facet_grid(cut ~ car2))
g+geom_point((alpha=1/3)+facet_grid(cut ~ car2))
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2))
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(. ~ cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
rm(list = ls())
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
plot(x, y, col = "blue", pch = 19, cex = 2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
dataFrame <- data.frame(x, y)
kmeansObj, kmeans(dataFrame, centers = 3)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
swirl()
library(swirl())
rm(list=ls())
swirl()
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors25)
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distance(distmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple", pch= 3, lwd = 2))
points(cx, cy, col = c("red", "orange", "purple"), pch= 3, lwd = 2))
points(cx, cy, col = c("red", "orange", "purple"), pch= 3, cex = 2, lwd = 2))
points(cx, cy, col = c("red", "orange", "purple"), pch= 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, cex = 2, col = cols1[newClust])
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=col1[newClust2])
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClus2, mean)
tapply(x, newClust2, mean)
tapply(y, newClus2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch=19, cex=2
)
points(kmObj$centers, col=c("black","red", "green", pch=3, cex=3, lwd=3)
)
points(kmObj$centers, col=c("black","red", "green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
t(matv)
matu matu %*% diag %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$c[,1]
svd1$v[,1]
swirl()
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * scd$d[1]) %*% svd1$v
a1 <- (svd1$u[,1] * svd$d[1]) %*% svd1$v
a1 <- (svd1$u[,1] * svd1$d[1]) %*% svd1$v
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d, t*scd1$v[,1:2]
a2 <- svd1[,1:2] %*% svd1$d, t*scd1[,1:2]
a2 <- svd1[,1:2] %*% svd1$d, t*scd1[1:2]
a2 <- svd1,1:2] %*% svd1$d, t(svd1[1:2])
a2 <- svd1[1:2] %*% svd1$d, t(svd1[1:2])
a2 <- svd1[1:2] %*% svd1$d %*% t(svd1[1:2])
a2 <- svd1[1:2] %*% svd1$d[1:2] %*% t(svd1[1:2])
a2 <- svd1[1:2] %*% diag(svd1$d[1:2]) %*% t(svd1[1:2])
a2 <- svd1[1:2] %*% svd1$d[1:2] %*% t(svd1[1:2])
a2 <- svd1[1:2] %*% svd1$d[1:2] %*% t(svd1[1:2])s
1+1
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(a5)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:2])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
1+1
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
swirl()
library(swirl)
swirl()
-5:2-
-5:20
-5:20
-(5:20)
exit
swirl
info()
main()
dim(ssd)
names(,562:563)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
dist(x[,1:3])
mdist <- dist(x[,1:3])
mdist <- dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hcluserering, lab.col = unclass(sub1$activity))
myplclust(hclusterering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist(sub1[,10:12])
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- scale(sub1[,-c(562,563)])
svd1 <- scale(sub1[,-c(562,563)]))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(sdv1$u)
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.com - unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kCLust <- kmeans(sub1[], centers = 5)
kCLust <- kmeans(sub1[1:2], centers = 5)
kCLust <- kmeans(sub1[, -c(562, 563)], centers = 5)
kCLust <- kmeans(sub1[, -c(562, 563)], centers = 56
kCLust <- kmeans(sub1[, -c(562, 563)], centers = 6
kCLust <- kmeans(sub1[, -c(562, 563)], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(x$y)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1)
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab = "Walkdown Cluster")
swirl()
swirl()
library(swirl)
rm(list=ls())
swirl()
dim(pm0)
head(pm0)
names
cnames
cnames <- strsplit(cnames, "|", fixed=TRUE)
cnames
names(mp0) <- make.names(cnames[[1]][wcol])
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(x0)
mean(in.na(x0))
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
)
)
)
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code = 63, Site.ID = 2008)
pm0sub <- subset(cnt0, County.Code == 63 &Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 &Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.date(pmsub$Date, "%Y%m%d")
dates0 <- as.Date(pmsub$Date, "%Y%m%d")
dates0 <- as.Date(pm0sub$Date, "%Y%m%d")
dates0 <- as.Date(pm0sub$Date, "%Y%m%d%")
dates0 <- as.character(pm0sub$Date, "%Y%m%d%")
dates0 <- as.character(pm0sub$Date, "%Y%m%d%")
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates-, x0sub, pch=20)
plot(dates0, x0sub, pch=20)
abline(lwd=2, median(x0sub), na.rm=TRUE )
abline(lwd=2, median(x0sub), na.rm=TRUE)
abline(lwd=2, median(x0sub,na.rm=TRUE))
abline(median(x0sub,na.rm=TRUE), lwd=2)
abline(median(x0sub),na.rm=TRUE), lwd=2)
abline()
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1, x1sub, pch-20)
plot(dates1, x1sub, pch=20)
abline(h= median(x1sub, na.rm=TRUE), lwd=3)
abline(h= median(x1sub, na.rm=TRUE), lwd=2)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
rng <- range(x0sub,x1sub,na.rm=TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0, d1, by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52, mrg[,2], c(.5,2.5))))
with(mrg, plot(rep(1,52, mrg[,2], xlim=c(.5,2.5))))
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1,52),rep(2,52),)
segments(rep(1,52),rep(2,52))
segments(rep(1,52),rep(2,52))
segments()
x
1+1
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y,]
setwd("~/Documents/Repdata Assignment 1")
files()
list.files()
list.files
list.files()
unlink('PA1_template_cache', recursive = TRUE)
